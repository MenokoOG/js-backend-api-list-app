const fs = require("fs");

function logRoutes(
  app,
  outputFilePath = "routes.txt",
  apiClientPath = "../client/src/frontendApiClient.js"
) {
  const routes = [];
  const apiClientFunctions = [];

  function processStack(stack, basePath = "") {
    stack.forEach((middleware) => {
      if (middleware.route) {
        const routePath = middleware.route.path;
        const routeMethods = Object.keys(middleware.route.methods);

        routeMethods.forEach((method) => {
          const fullPath = `${basePath}${routePath}`.replace(/\/+/g, "/"); // Clean up double slashes
          routes.push(`${method.toUpperCase()} ${fullPath}`);
          console.log(`Detected route: ${method.toUpperCase()} ${fullPath}`);

          const functionName = generateFunctionName(method, fullPath);
          console.log(
            `Generating function: ${functionName} for ${method.toUpperCase()} ${fullPath}`
          );
          apiClientFunctions.push(
            generateApiClientFunction(functionName, method, fullPath)
          );
        });
      } else if (middleware.name === "router" && middleware.handle.stack) {
        const cleanedBasePath = cleanupBasePath(middleware.regexp.source);
        processStack(middleware.handle.stack, cleanedBasePath);
      }
    });
  }

  processStack(app._router.stack);

  if (routes.length > 0) {
    fs.writeFileSync(outputFilePath, routes.join("\n"), "utf8");
    console.log(`API routes have been logged to ${outputFilePath}`);
  }

  if (apiClientFunctions.length > 0) {
    const apiClientContent = `
      // This file is auto-generated by the backend.
      // Use these functions to make HTTP requests to the backend APIs.

      const BASE_URL = 'http://localhost:5000';  // Adjust the base URL as needed

      ${apiClientFunctions.join("\n\n")}

      export {
        ${apiClientFunctions
          .map((func) => func.match(/function (\w+)/)[1])
          .join(",\n    ")}
      };
    `;

    fs.writeFileSync(apiClientPath, apiClientContent, "utf8");
    console.log(`API client has been generated at ${apiClientPath}`);
  }
}

function cleanupBasePath(path) {
  return path.replace(/[\\^$.*+?()[\]{}|=]/g, "").replace(/\/$/, ""); // Clean up regex special characters and trailing slashes
}

function generateFunctionName(method, routePath) {
  const parts = routePath.split("/").filter(Boolean);

  // Default resource name
  let resourceName = parts.length > 1 ? parts[parts.length - 1] : "Root";

  // If the last part is a dynamic parameter (e.g., ':id'), convert it to 'ById'
  if (resourceName.startsWith(":")) {
    resourceName = "ById";
  } else {
    // Capitalize resource name and make it singular if it's for a list
    resourceName = resourceName.charAt(0).toUpperCase() + resourceName.slice(1);
  }

  // Adjust function name based on the HTTP method
  if (method === "get" && !routePath.includes(":id")) {
    return `get${resourceName}`; // Singular for collections like `getUsers`
  } else if (method === "get") {
    return `get${resourceName}`; // For getting a single user
  } else if (method === "post") {
    return `create${resourceName}`; // For creating a resource
  } else if (method === "put") {
    return `update${resourceName}`; // For updating a resource
  } else if (method === "delete") {
    return `delete${resourceName}`; // For deleting a resource
  }

  return `${method}${resourceName}`;
}

function generateApiClientFunction(functionName, method, routePath) {
  const urlPath = routePath.replace(/:id/g, "${id}"); // Replace :id with template literal
  let bodyPart = "";
  let params =
    method === "post"
      ? "body"
      : "id" + (["put", "post"].includes(method) ? ", body" : "");

  if (["post", "put"].includes(method)) {
    bodyPart = `
      body: JSON.stringify(body),
      headers: {
        'Content-Type': 'application/json'
      },`;
  }

  // Handle DELETE requests with no content (204 No Content)
  if (method === "delete") {
    return `
      async function ${functionName}(id) {
        const response = await fetch(\`\${BASE_URL}${urlPath}\`, {
          method: '${method.toUpperCase()}',
        });
        
        if (response.status === 204) {
          return null;  // No content for DELETE request
        } else {
          const data = await response.json();
          return data;
        }
      }
    `;
  }

  // For other methods, keep the original logic
  return `
    async function ${functionName}(${params}) {
      const response = await fetch(\`\${BASE_URL}${urlPath}\`, {
        method: '${method.toUpperCase()}',${bodyPart}
      });
      
      const data = await response.json();
      return data;
    }
  `;
}

module.exports = { logRoutes };
